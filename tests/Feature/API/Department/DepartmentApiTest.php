<?php

namespace Tests\Feature\API\Department;

use App\Models\Department;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Config;
use JWTAuth;
use Tests\TestCase;
use Faker\Factory as Faker;

class DepartmentApiTest extends TestCase
{
    protected $email;
    protected $password;
    protected $baseUrl;
    protected $user;
    protected $token;
    protected $faker;
    protected $department;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->email = Config::get('api.apiEmail');
        $this->password = Config::get('api.apiPassword');
        $this->baseUrl = Config::get('app.url') . '/api/v1';
        $this->user = User::where('email', Config::get('api.apiEmail'))->first();
        $this->token = JWTAuth::fromUser($this->user);
        $this->faker = Faker::create();
        $this->department = Department::take(1)->first();
    }

    public function test_success_departments_list_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('GET', $this->baseUrl . '/departments')
            ->assertStatus(200)
            ->assertJsonStructure([
                '*' => [
                    'id',
                    'label',
                    'code',
                    'count_employees',
                    'created_at',
                    'updated_at'
                ],
            ]);
    }

    public function test_success_department_by_id_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('GET', $this->baseUrl . '/departments/' .$this->department->id)
            ->assertStatus(200)
            ->assertJsonStructure([
                    'id',
                    'label',
                    'code',
                    'count_employees',
                    'created_at',
                    'updated_at'
            ]);
    }

    public function test_validate_label_create_department_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/departments/create')
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The label field is required.',
            ]);
    }

    public function test_validate_code_create_department_api(){
        $inputs = [
            'label' => $this->faker->company(),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/departments/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The code field is required.',
            ]);
    }

    public function test_success_create_department_api(){
        $inputs = [
            'label' => $this->faker->company(),
            'code' => $this->faker->word(),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/departments/create', $inputs)
            ->assertStatus(201)
            ->assertJsonStructure([
                'message',
                'data' => [
                    'label',
                    'code',
                    'updated_at',
                    'created_at',
                    'id',
                ]
            ]);
    }

    public function test_validate_label_update_department_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/departments/update/' . $this->department->id)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The label field is required.',
            ]);
    }

    public function test_validate_code_update_department_api(){
        $inputs = [
            'label' => $this->faker->company(),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/departments/update/' . $this->department->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The code field is required.',
            ]);
    }

    public function test_success_update_department_api(){
        $inputs = [
            'label' => $this->faker->company(),
            'code' => $this->faker->word(),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/departments/update/' . $this->department->id, $inputs)
            ->assertStatus(200)
            ->assertJsonStructure([
                'message',
                'status'
            ]);
    }

    public function test_success_destroy_department_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('DELETE', $this->baseUrl . '/departments/destroy/' . $this->department->id)
            ->assertStatus(200)
            ->assertJsonStructure([
                'message',
                'status'
            ]);
    }

}
