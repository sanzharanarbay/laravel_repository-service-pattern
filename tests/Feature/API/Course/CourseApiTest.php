<?php

namespace Tests\Feature\API\Course;

use App\Models\Course;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Config;
use JWTAuth;
use Tests\TestCase;
use Faker\Factory as Faker;

class CourseApiTest extends TestCase
{
    protected $email;
    protected $password;
    protected $baseUrl;
    protected $user;
    protected $token;
    protected $faker;
    protected $course;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->email = Config::get('api.apiEmail');
        $this->password = Config::get('api.apiPassword');
        $this->baseUrl = Config::get('app.url') . '/api/v1';
        $this->user = User::where('email', Config::get('api.apiEmail'))->first();
        $this->token = JWTAuth::fromUser($this->user);
        $this->faker = Faker::create();
        $this->course = Course::take(1)->first();
    }

    public function test_success_courses_list_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('GET', $this->baseUrl . '/courses')
            ->assertStatus(200)
            ->assertJsonStructure([
                'current_page',
                'data' => [
                    '*' => [
                        'id',
                        'title',
                        'description',
                        'credits',
                        'start_date',
                        'end_date',
                        'is_active',
                        'created_by',
                        'created_at',
                        'updated_at',
                        'created_user',
                        'employees'
                    ]],
                'first_page_url',
                'from',
                'last_page',
                'last_page_url',
                'links',
                'next_page_url',
                'path',
                'per_page',
                'prev_page_url',
                'to',
                'total'
            ]);
    }

    public function test_success_course_by_id_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('GET', $this->baseUrl . '/courses/' .$this->course->id)
            ->assertStatus(200)
            ->assertJsonStructure([
                'id',
                'title',
                'description',
                'credits',
                'start_date',
                'end_date',
                'is_active',
                'created_by',
                'created_at',
                'updated_at',
                'created_user',
                'employees'
            ]);
    }

    public function test_validate_title_create_course_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create')
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The title field is required.',
            ]);
    }

    public function test_validate_description_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The description field is required.',
            ]);
    }

    public function test_validate_credits_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph()
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The credits field is required.',
            ]);
    }

    public function test_validate_credits_length_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(7, 10),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The credits must be between 1 and 6.',
            ]);
    }

    public function test_validate_start_date_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The start date field is required.',
            ]);
    }

    public function test_validate_start_date_period_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The start date must be a date after tomorrow.',
            ]);
    }

    public function test_validate_end_date_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->addDays(2)->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The end date field is required.',
            ]);
    }

    public function test_validate_end_date_period_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->addDays(2)->format('Y-m-d'),
            'end_date' => Carbon::now()->subDays(2)->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The end date must be a date after start date.',
            ]);
    }

    public function test_success_create_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->addDays(2)->format('Y-m-d'),
            'end_date' => Carbon::now()->addWeeks(2)->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('POST', $this->baseUrl . '/courses/create', $inputs)
            ->assertStatus(201)
            ->assertJsonStructure([
                'data' => [
                    'title',
                    'description',
                    'credits',
                    'start_date',
                    'end_date',
                    'created_by',
                    'updated_at',
                    'created_at',
                    'id',
                ],
                'message',
            ]);
    }

    public function test_validate_title_update_course_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The title field is required.',
            ]);
    }

    public function test_validate_description_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The description field is required.',
            ]);
    }

    public function test_validate_credits_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph()
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The credits field is required.',
            ]);
    }

    public function test_validate_credits_length_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(7, 10),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The credits must be between 1 and 6.',
            ]);
    }

    public function test_validate_start_date_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The start date field is required.',
            ]);
    }

    public function test_validate_start_date_period_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The start date must be a date after tomorrow.',
            ]);
    }

    public function test_validate_end_date_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->addDays(2)->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The end date field is required.',
            ]);
    }

    public function test_validate_end_date_period_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->addDays(2)->format('Y-m-d'),
            'end_date' => Carbon::now()->subDays(2)->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(422)
            ->assertJson([
                'error' => 'The end date must be a date after start date.',
            ]);
    }

    public function test_success_update_course_api(){
        $inputs = [
            'title' => $this->faker->company(),
            'description' => $this->faker->paragraph(),
            'credits' => $this->faker->numberBetween(1, 6),
            'start_date' => Carbon::now()->addDays(2)->format('Y-m-d'),
            'end_date' => Carbon::now()->addWeeks(2)->format('Y-m-d')
        ];
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('PUT', $this->baseUrl . '/courses/update/' . $this->course->id, $inputs)
            ->assertStatus(200)
            ->assertJsonStructure([
                'status',
                'message',
            ]);
    }

    public function test_success_destroy_course_api(){
        $this->withHeaders([
            'Accept' => 'application/json',
            'Authorization' => 'Bearer '. $this->token,
        ])->json('DELETE', $this->baseUrl . '/courses/destroy/' . $this->course->id)
            ->assertStatus(200)
            ->assertJsonStructure([
                'message',
                'status'
            ]);
    }

}
